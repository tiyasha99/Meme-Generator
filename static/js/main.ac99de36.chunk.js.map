{"version":3,"sources":["Components/Header.js","Components/MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","this","props","name","React","Component","MemeGenerator","state","topText","bottomText","randomImg","allMemesImg","handleChange","bind","chooseRandom","fetch","then","response","json","memes","data","setState","e","target","value","console","log","max","Math","floor","random","length","arrayIndex","getRandomInt","url","className","placeholder","onChange","onClick","src","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAYeA,E,4JAVb,WACE,OACE,iCACE,4BAAIC,KAAKC,MAAMC,a,GAJFC,IAAMC,W,cC0EZC,E,kDAxEb,aAAc,IAAD,8BACX,gBACKC,MAAO,CACVC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATT,E,qDAWb,WAAoB,IAAD,OACjBE,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,IAAOE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CACVV,YAAaQ,S,0BAK3B,SAAaG,GACXrB,KAAKoB,SAAL,eACGC,EAAEC,OAAOpB,KAAOmB,EAAEC,OAAOC,QAE5BC,QAAQC,IAAIJ,EAAEC,U,0BAGhB,SAAaI,GACX,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,M,0BAE/C,WACE,IAAII,EAAS9B,KAAKM,MAAMI,YAAYoB,OAChCC,EAAa/B,KAAKgC,aAAaF,EAAS,GAC5CN,QAAQC,IAAI,eAAgBK,GAC5BN,QAAQC,IAAI,QAASM,GACrB/B,KAAKoB,SAAS,CACVX,UAAYT,KAAKM,MAAMI,YAAYqB,GAAYE,Q,oBAGrD,WAEE,OADAT,QAAQC,IAAIzB,KAAKM,MAAMI,aAErB,gCACE,sBAAKwB,UAAU,YAAf,UACE,uBACEhC,KAAK,UACLiC,YAAY,iBACZZ,MAAOvB,KAAKM,MAAMC,QAClB6B,SAAUpC,KAAKW,eAEf,uBACAT,KAAK,aACLiC,YAAY,oBACZZ,MAAOvB,KAAKM,MAAME,WAClB4B,SAAUpC,KAAKW,eAEf,wBAAQ0B,QAASrC,KAAKa,aAAaD,KAAKZ,MAAxC,yBAKJ,sBAAKkC,UAAU,OAAf,UACE,qBAAKI,IAAKtC,KAAKM,MAAMG,YACrB,oBAAIyB,UAAU,MAAd,SAAqBlC,KAAKM,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBlC,KAAKM,MAAME,uB,GAnEjBL,IAAMC,WCiBnBmC,E,4JAbb,WACE,OACE,sBAAKL,UAAU,MAAf,UACE,cAAC,EAAD,CACEhC,KAAK,mBAEP,cAAC,EAAD,W,GAPUE,aCOHoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ac99de36.chunk.js","sourcesContent":["import React from \"react\";\r\nclass Header extends React.Component {\r\n  render(){\r\n    return(\r\n      <header>\r\n        <p>{this.props.name}</p>\r\n      </header>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React from \"react\"\r\n\r\nclass MemeGenerator extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state ={\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n      allMemesImg: []\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.chooseRandom = this.chooseRandom.bind(this)\r\n  }\r\n  componentDidMount(){\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const {memes} = response.data\r\n            this.setState({\r\n                allMemesImg: memes\r\n            })\r\n        })\r\n        \r\n    }\r\n  handleChange(e){\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n    console.log(e.target)\r\n    \r\n  }\r\n  getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n  chooseRandom(){\r\n    let length = this.state.allMemesImg.length;\r\n    let arrayIndex = this.getRandomInt(length - 1);\r\n    console.log(\"array length\", length)\r\n    console.log(\"Index\", arrayIndex);\r\n    this.setState({\r\n        randomImg : this.state.allMemesImg[arrayIndex].url\r\n    })\r\n}\r\n  render(){\r\n    console.log(this.state.allMemesImg)\r\n    return(\r\n      <div>\r\n        <div className=\"meme-form\">\r\n          <input\r\n            name=\"topText\"\r\n            placeholder=\"Enter top text\"\r\n            value={this.state.topText}\r\n            onChange={this.handleChange}\r\n            />\r\n            <input\r\n            name=\"bottomText\"\r\n            placeholder=\"Enter bottom text\"\r\n            value={this.state.bottomText}\r\n            onChange={this.handleChange}\r\n            />\r\n            <button onClick={this.chooseRandom.bind(this)}>\r\n              Generate\r\n            </button>\r\n\r\n        </div>\r\n        <div className=\"meme\">\r\n          <img src={this.state.randomImg}></img>\r\n          <h2 className=\"top\">{this.state.topText}</h2>\r\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default MemeGenerator;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './Components/Header'\nimport MemeGenerator from './Components/MemeGenerator'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header \n          name=\"Meme Generator\"\n        />\n        <MemeGenerator \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}